// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  hashedPassword  String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
  role          UserRole?       @default(USER)
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscribedChannelIds String[] @db.ObjectId
  likedVideoIds String[] @db.ObjectId
  dislikedVideoIds String[] @db.ObjectId

  channel Channel?
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}



model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId @unique
  name String
  handle String
  imageSrc String
  createdAt DateTime @default(now())
  subscriberCount Int @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 

  comments Comment[]
  videos Video[]
}

model Video {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  channelId String @db.ObjectId
  title String
  description String
  likeCount Int @default(0)
  dislikeCount Int @default(0)
  viewCount Int @default(0)
  createdAt DateTime @default(now())
  thumbnailSrc String
  videoSrc String

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  comments Comment[]
}

model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  videoId   String @db.ObjectId
  channelId String @db.ObjectId
  text      String
  createdAt DateTime @default(now())

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}


model Product {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  userId        String            @db.ObjectId
  name          String            @db.ObjectId
  priceInCents  Int
  filePath      String
  imagePath     String
  description   String 
  isAvailableForPurchase Boolean  @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  orders        Order[]
  DownloadVerifications    DownloadVerification[]
}


model Order {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  pricePaidInCents  Int       
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  userId        String            @db.ObjectId
  productId     String            @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)       
}


model DownloadVerification {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt     DateTime       
  createdAt     DateTime          @default(now())
  productId     String            @db.ObjectId

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}


 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}